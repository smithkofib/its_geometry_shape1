# -*- coding: utf-8 -*-
"""ITS_Geometry_Shape

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qfdvIHYu3cj9DnD-ogIA-AkwyLgC2l6d
"""

!pip install gradio

!pip install rdflib
import rdflib
import gradio as gr

!pip install rdflib owlrl gradio

from rdflib import Graph, Namespace, RDF, RDFS, URIRef

from rdflib import Graph

# Load the ontology file
ontology_path = "/content/Shape_Ontology.owl"
g = Graph()
g.parse(ontology_path, format="xml")  # OWL files use XML format

print(f"Ontology loaded with {len(g)} triples.")

ns = Namespace("http://webprotege.stanford.edu/")

import gradio as gr
from rdflib import Graph, Namespace, RDF, RDFS, URIRef

# Load the ontology
ontology_path = "/content/Shape_Ontology.owl"
g = Graph()
g.parse(ontology_path, format="xml")

# Define the namespace
shape_map = {
    "Square": URIRef("http://webprotege.stanford.edu/RCuD3IdvYpMWLFiqKSSgEVC"),
    "Rectangle": URIRef("http://webprotege.stanford.edu/RCxMtj1J7qmn04Xsin7R3n3"),
    "Triangle": URIRef("http://webprotege.stanford.edu/RN8Pin7yiGiN6MEdhzfmGe")
}

# Function to fetch formula and compute area
def calculate_area(shape_name, length=0, width=0, base=0, height=0):
    shape_uri = shape_map.get(shape_name)

    if not shape_uri:
        return "Shape not found in ontology."

    # No negative or zero values allowed
    if shape_name == "Square" and (length <= 0):
        return "Error: Length must be greater than zero for a square."
    elif shape_name == "Rectangle" and (length <= 0 or width <= 0):
        return "Error: Length and width must be greater than zero for a rectangle."
    elif shape_name == "Triangle" and (base <= 0 or height <= 0):
        return "Error: Base and height must be greater than zero for a triangle."


# Hardcoded formulas
    if shape_name == "Square":
        area = length ** 2
        formula = "Area = side²"
    elif shape_name == "Rectangle":
        area = length * width
        formula = "Area = length × width"
    elif shape_name == "Triangle":
        area = 0.5 * base * height
        formula = "Area = ½ × base × height"
    else:
        return "Formula not available."

    return f"Formula: {formula}\nCalculated Area: {area}"

# Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("# Shape Formula Finder")

    shape_dropdown = gr.Dropdown(["Square", "Rectangle", "Triangle"], label="Select a Shape")

    with gr.Row():
        length_input = gr.Number(label="Length", visible=False)
        width_input = gr.Number(label="Width", visible=False)
        base_input = gr.Number(label="Base", visible=False)
        height_input = gr.Number(label="Height", visible=False)

    output = gr.Textbox(label="Output")

    def update_inputs(shape):
        """Show the appropriate input fields based on shape."""
        if shape == "Square":
            return gr.update(visible=True), gr.update(visible=False), gr.update(visible=False), gr.update(visible=False)
        elif shape == "Rectangle":
            return gr.update(visible=True), gr.update(visible=True), gr.update(visible=False), gr.update(visible=False)
        elif shape == "Triangle":
            return gr.update(visible=False), gr.update(visible=False), gr.update(visible=True), gr.update(visible=True)

    shape_dropdown.change(update_inputs, inputs=[shape_dropdown], outputs=[length_input, width_input, base_input, height_input])

    calculate_button = gr.Button("Calculate")
    calculate_button.click(
        calculate_area,
        inputs=[shape_dropdown, length_input, width_input, base_input, height_input],
        outputs=[output]
    )

demo.launch()